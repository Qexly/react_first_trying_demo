{"version":3,"sources":["Components/Profile/ProfileInfo/ProfileInfo.module.css","Components/Profile/MyPosts/MyPosts.module.css","Components/Profile/MyPosts/Post/Post.module.css","Components/Profile/ProfileInfo/imgs/car1.gif","assets/images/ava.png","Components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.jsx","Components/Profile/ProfileInfo/ProfileStatus/ProfileStatusHooks.jsx","Components/Profile/ProfileInfo/ProfileInfo.jsx","Components/Profile/MyPosts/Post/Post.jsx","Components/Profile/MyPosts/MyPosts.jsx","Components/Profile/MyPosts/MyPostsContainer.jsx","Components/Profile/Profile.jsx","Components/Profile/ProfileContainer.jsx"],"names":["module","exports","React","Component","ProfileStatusHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","textInput","current","focus","createRef","onToggleEditModeHandler","e","type","updateStatus","result","typoe","ref","value","onChange","target","onBlur","onDoubleClick","ProfileInfo","profile","className","s","description","src","photos","large","Preloader","Post","item","ava","message","likesCount","maxLength10","maxLengthCreator","PostReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","name","placeholder","validate","required","MyPosts","postElements","posts","map","console","log","postsContainer","formData","addNewPost","newPostText","MyPostsContainer","connect","state","profilePage","postData","dispatch","postText","addPostActionCreator","Profile","updateUserStatus","ProfileContainer","userId","this","match","params","authorizedId","getUserProfile","getUserStatus","compose","auth","id","isAuth","withRouter","withAuthRedirect"],"mappings":"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","file":"static/js/3.a705912f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"img1Content\":\"ProfileInfo_img1Content__3n_U9\",\"description\":\"ProfileInfo_description__1z1yu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsContainer\":\"MyPosts_postsContainer__oNnbV\",\"posts\":\"MyPosts_posts__16TL_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2jojQ\"};","export default __webpack_public_path__ + \"static/media/car1.34eee423.gif\";","export default __webpack_public_path__ + \"static/media/ava.8a99c228.png\";","import React from \"react\";\r\n\r\nclass ProfileStatus extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            editMode: false,\r\n            value: props.status,\r\n        }\r\n\r\n        this.onToggleEditModeHandler = this.onToggleEditModeHandler.bind(this);\r\n        this.textInput = React.createRef();\r\n    }\r\n\r\n    onToggleEditModeHandler(e) {\r\n        this.setState((state, props) => ({editMode: !state.editMode}));\r\n        if (e.type === 'blur') this.props.updateStatus(this.state.value);\r\n    }\r\n\r\n    onChangeInput(e) {\r\n        this.setState((state, props) => ({value: e.target.value}));\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (this.state.editMode) this.textInput.current.focus();\r\n        if (prevProps.status !== this.props.status) {\r\n            this.setState((state, props) => ({value: this.props.status})); //Если статус не успел придти, то value инициализируется пустой строкой\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        let result = !this.state.editMode ? (\r\n            <div>\r\n                <span onDoubleClick={this.onToggleEditModeHandler}>{this.props.status || 'null'}</span>\r\n            </div>\r\n        ) : (\r\n            <div>\r\n                <input ref={this.textInput} value={this.state.value} \r\n                    onBlur={this.onToggleEditModeHandler} \r\n                    onChange={this.onChangeInput.bind(this)}   \r\n                />\r\n            </div>\r\n        );\r\n        \r\n        return (\r\n            <div>\r\n                {result}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ProfileStatus;","import React, { useState, useEffect } from 'react';\r\n\r\nconst ProfileStatusHooks = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status); //Статус сначала пустой приходит, а когда запрос выполняется - приходит новый, но его надо засетать в status\r\n\r\n    useEffect(() => {\r\n        if (editMode) textInput.current.focus();\r\n    });\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status);\r\n    }, [props.status]);\r\n\r\n    let textInput = React.createRef()\r\n\r\n    const onToggleEditModeHandler = (e) => {\r\n        setEditMode(!editMode);\r\n        if (e.type === 'blur') props.updateStatus(status);\r\n    }\r\n\r\n    const onChangeInput = (e) => {\r\n        setStatus(e.target.value); \r\n    }\r\n\r\n    let result = !editMode ? (\r\n        <div>\r\n            <span onDoubleClick={onToggleEditModeHandler}>{props.status || 'null'}</span>\r\n        </div>\r\n    ) : (\r\n            <div>\r\n                <input typoe=\"text \"ref={textInput} value={status}\r\n                    onChange={onChangeInput}\r\n                    onBlur={onToggleEditModeHandler}\r\n                />\r\n            </div>\r\n        );\r\n\r\n    return (\r\n        <div>\r\n            {result}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusHooks;\r\n\r\n","import s from './ProfileInfo.module.css';\r\nimport car1 from './imgs/car1.gif';\r\nimport ava from './../../../assets/images/ava.png';\r\nimport Preloader from './../../common/preloader/Preloader.jsx';\r\nimport ProfileStatus from './ProfileStatus/ProfileStatus.jsx';\r\nimport ProfileStatusHooks from './ProfileStatus/ProfileStatusHooks.jsx';\r\n\r\nfunction ProfileInfo(props) {\r\n    if (!props.profile) return <Preloader />\r\n    return (\r\n        <div>\r\n            {/*\r\n                <div>\r\n                <img src={car1} className={s.img1Content} />\r\n            </div>*/\r\n            }\r\n            <div className={s.description}>\r\n                <img src={props.profile.photos.large} />\r\n                <ProfileStatusHooks status={props.status} updateStatus={props.updateStatus}/>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileInfo;","import s from './Post.module.css';\r\nimport ava from './imgs/ava.png'\r\n\r\nfunction Post(props) {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src={ava} />\r\n            {props.message}\r\n            <div>\r\n                <span>like: {props.likesCount}</span>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;","import s from './MyPosts.module.css';\r\nimport React from 'react';\r\nimport Post from './Post/Post.jsx';\r\nimport { reduxForm, Field } from 'redux-form';\r\nimport { required, maxLengthCreator } from \"./../../../Utils/Validators.js\";\r\nimport { Textarea } from './../../common/FormsControls/FormsControls.jsx';\r\n\r\nlet maxLength10 = maxLengthCreator(10);\r\n\r\nfunction MyPosts (props){\r\n\r\n    let postElements = props.posts.map((item) => {\r\n        return <Post message={item.message} likesCount={item.likesCount} />\r\n    });\r\n\r\n    function addPost(formData) {\r\n        props.addNewPost(formData.newPostText);\r\n    }\r\n    console.log('MyPosts render');\r\n    return (\r\n        <div className={s.postsContainer}>\r\n            <h3>My posts</h3>\r\n            <PostReduxForm onSubmit={addPost} />\r\n            <div className={s.posts}>\r\n                {postElements}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst PostForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field component={Textarea} name=\"newPostText\" placeholder=\"Write a message\" validate={[required, maxLength10]}/>\r\n            <br />\r\n            <button>Add post</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst PostReduxForm = reduxForm({form: 'postForm'})(PostForm);\r\n\r\nexport default MyPosts","import MyPosts from './MyPosts.jsx';\r\nimport { addPostActionCreator }  from './../../../Redux/profileReducer';\r\nimport {connect} from 'react-redux';\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.postData,\r\n        newPostText: state.profilePage.newPostText,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addNewPost: (postText) => {\r\n            dispatch(addPostActionCreator(postText));\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;\r\n","import s from './Profile.module.css';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer.jsx';\r\n\r\nfunction Profile (props){\r\n\r\n    return (\r\n        <div>\r\n          <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateUserStatus} />\r\n          <MyPostsContainer />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Profile from './Profile.jsx';\r\nimport { getUserProfile, getUserStatus, updateUserStatus } from './../../Redux/profileReducer.js';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { compose } from 'redux'; \r\nimport { withAuthRedirect } from './../../HOCs/withAuthRedirect.jsx';\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId || this.props.authorizedId;\r\n        this.props.getUserProfile(userId);\r\n        this.props.getUserStatus(userId);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props} /> \r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedId: state.auth.id,\r\n        isAuth: state.auth.isAuth,\r\n    };\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {getUserProfile, getUserStatus,  updateUserStatus}),  //Рендер идет сверху вниз - от коры к ядру\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)\r\n/*\r\nlet ProfileAuthRedirect = withAuthRedirect(ProfileContainer);\r\n\r\nlet UrlComponent = withRouter(ProfileAuthRedirect);\r\n\r\nexport default connect(mapStateToProps, {getUserProfile})(UrlComponent);\r\n*/\r\n\r\n\r\n\r\n"],"sourceRoot":""}